{"version":3,"file":"driver.js","sourceRoot":"","sources":["../../src/lib/driver.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\n\nimport * as settings from './settings'\nimport * as methodCache from './methodCache'\nimport { Message } from './message'\nimport { IConnectOptions, IRespondOptions, ICallback, ILogger, ICredentials } from '../config/driverInterfaces'\nimport { IMessage } from '../config/messageInterfaces'\nimport { logger, replaceLog } from './log'\nimport Socket, { Subscription } from './ddp'\nimport { IMessageReceiptAPI } from '../utils/interfaces'\n\n/** Collection names */\nconst _messageCollectionName = 'stream-room-messages'\nconst _messageStreamName = '__my_messages__'\n\n// CONNECTION SETUP AND CONFIGURE\n// -----------------------------------------------------------------------------\n\n/** Internal for comparing message update timestamps */\nexport let lastReadTime: Date\n\n/**\n * The integration property is applied as an ID on sent messages `bot.i` param\n * Should be replaced when connection is invoked by a package using the SDK\n * e.g. The Hubot adapter would pass its integration ID with credentials, like:\n */\nexport const integrationId = settings.integrationId\n\n/**\n * Event Emitter for listening to connection.\n * @example\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect()\n *  driver.events.on('connected', () => console.log('driver connected'))\n */\nexport const events = new EventEmitter()\n\nexport let ddp: Socket\n\n/**\n * Asteroid subscriptions, exported for direct polling by adapters\n * Variable not initialised until `prepMeteorSubscriptions` called.\n */\nexport let subscriptions: Subscription[] = []\n\n/**\n * Current user object populated from resolved login\n */\nexport let userId: string\n\n/**\n * Array of joined room IDs (for reactive queries)\n */\nexport let joinedIds: string[] = []\n\n/**\n * Allow override of default logging with adapter's log instance\n */\nexport function useLog (externalLog: ILogger) {\n  replaceLog(externalLog)\n}\n\n/**\n * Initialise socket instance with given options or defaults.\n * Returns promise, resolved with Socket instance. Callback follows\n * error-first-pattern. Error returned or promise rejected on timeout.\n * Removes http/s protocol to get connection hostname if taken from URL.\n * @example <caption>Use with callback</caption>\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect({}, (err) => {\n *    if (err) throw err\n *    else console.log('connected')\n *  })\n * @example <caption>Using promise</caption>\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect()\n *    .then(() => console.log('connected'))\n *    .catch((err) => console.error(err))\n */\nexport function connect (options: IConnectOptions = {}, callback?: ICallback): Promise<Socket> {\n  return new Promise((resolve, reject) => {\n    const config = Object.assign({}, settings, options) // override defaults\n    config.host = config.host.replace(/(^\\w+:|^)\\/\\//, '')\n    logger.info('[connect] Connecting', config)\n\n    ddp = new Socket(config.host)\n\n    setupMethodCache(ddp) // init instance for later caching method calls\n\n    // TODO: refact\n    ddp.on('connected', () => events.emit('connected'))\n    ddp.on('reconnected', () => events.emit('reconnected'))\n    // END\n\n    let cancelled = false\n    const rejectionTimeout = setTimeout(function () {\n      logger.info(`[connect] Timeout (${config.timeout})`)\n      const err = new Error('Socket connection timeout')\n      cancelled = true\n      events.removeAllListeners('connected')\n      callback ? callback(err, ddp) : reject(err)\n    }, config.timeout)\n\n    // if to avoid condition where timeout happens before listener to 'connected' is added\n    // and this listener is not removed (because it was added after the removal)\n    if (!cancelled) {\n      events.once('connected', () => {\n        logger.info('[connect] Connected')\n        // if (cancelled) return asteroid.ddp.disconnect() // cancel if already rejected\n        clearTimeout(rejectionTimeout)\n        if (callback) callback(null, ddp)\n        resolve(ddp)\n      })\n    }\n  })\n}\n\n/**\n * Remove all active subscriptions, logout and disconnect from Rocket.Chat\n */\nexport function disconnect (): Promise<void> {\n  logger.info('Unsubscribing, logging out, disconnecting')\n  unsubscribeAll()\n  return logout().then(() => Promise.resolve())\n}\n\n// ASYNC AND CACHE METHOD UTILS\n// -----------------------------------------------------------------------------\n\n/**\n * Setup method cache configs from env or defaults, before they are called.\n * @param ddp The Socket instance to cache method calls\n */\nfunction setupMethodCache (ddp: Socket): void {\n  methodCache.use(ddp)\n  methodCache.create('getRoomIdByNameOrId', {\n    max: settings.roomCacheMaxSize,\n    maxAge: settings.roomCacheMaxAge\n  }),\n  methodCache.create('getRoomNameById', {\n    max: settings.roomCacheMaxSize,\n    maxAge: settings.roomCacheMaxAge\n  })\n  methodCache.create('createDirectMessage', {\n    max: settings.dmCacheMaxSize,\n    maxAge: settings.dmCacheMaxAge\n  })\n}\n\n/**\n * Wraps method calls to ensure they return a Promise with caught exceptions.\n * @param method The Rocket.Chat server method, to call through Socket\n * @param params Single or array of parameters of the method to call\n */\nexport function asyncCall (method: string, ...params: any[]): Promise <any> {\n  logger.info(`[${method}] Calling (async): ${JSON.stringify(params)}`)\n  return Promise.resolve(ddp.call(method, ...params))\n    .catch((err: Error) => {\n      logger.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then(({ result }: any) => {\n      (result)\n        ? logger.debug(`[${method}] Success: ${JSON.stringify(result)}`)\n        : logger.debug(`[${method}] Success`)\n      return result\n    })\n}\n\n/**\n * Call a method as async via Socket, or through cache if one is created.\n * If the method doesn't have or need parameters, it can't use them for caching\n * so it will always call asynchronously.\n * @param name The Rocket.Chat server method to call\n * @param params Single or array of parameters of the method to call\n */\nexport function callMethod (name: string, params?: any | any[]): Promise<any> {\n  return (methodCache.has(name) || typeof params === 'undefined')\n    ? asyncCall(name, params)\n    : cacheCall(name, params)\n}\n\n/**\n * Wraps Socket method calls, passed through method cache if cache is valid.\n * @param method The Rocket.Chat server method, to call through Socket\n * @param key Single string parameters only, required to use as cache key\n */\nexport function cacheCall (method: string, key: string): Promise<any> {\n  return methodCache.call(method, key)\n    .catch((err: Error) => {\n      logger.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then((result: any) => {\n      result\n        ? logger.debug(`[${method}] Success: ${JSON.stringify(result)}`)\n        : logger.debug(`[${method}] Success`)\n      return result\n    })\n}\n\n// LOGIN AND SUBSCRIBE TO ROOMS\n// -----------------------------------------------------------------------------\n\n/** Login to Rocket.Chat via Socket */\nexport function login (credentials: ICredentials = {\n  username: settings.username,\n  password: settings.password,\n  ldap: settings.ldap\n}): Promise<any> {\n  let login: Promise<any>\n  if (credentials.ldap) {\n    logger.info(`[login] Logging in ${credentials.username} with LDAP`)\n    login = ddp.login(\n      { ldap: true, ldapOptions: credentials.ldapOptions || {}, ldapPass: credentials.password, username: credentials.username }\n    )\n  } else {\n    logger.info(`[login] Logging in ${credentials.username}`)\n    login = ddp.login({\n      user: { username: credentials.username, email: credentials.email },\n      password: credentials.password\n    })\n  }\n  return login\n    .then((loggedInUser) => {\n      userId = loggedInUser.id\n      return loggedInUser.id\n    })\n    .catch((err: Error) => {\n      logger.info('[login] Error:', err)\n      throw err // throw after log to stop async chain\n    })\n}\n\n/** Logout of Rocket.Chat via Socket */\nexport function logout (): Promise<void | null> {\n  return ddp.logout().catch((err: Error) => {\n    logger.error('[Logout] Error:', err)\n    throw err // throw after log to stop async chain\n  })\n}\n\n/**\n * Subscribe to Meteor subscription\n * Resolves with subscription (added to array), with ID property\n * @todo - 3rd param of ddp.subscribe is deprecated in Rocket.Chat?\n */\nexport function subscribe (topic: string, roomId: string): Promise<any> {\n  return new Promise((resolve, reject) => {\n    logger.info(`[subscribe] Preparing subscription: ${topic}: ${roomId}`)\n    const promiseSubscription = ddp.subscribe(topic, roomId, true)\n    return promiseSubscription.then((subscription) => {\n      subscriptions.push(subscription)\n      logger.info(`[subscribe] Stream ready: ${subscription.id}`)\n      resolve(subscription)\n    })\n  })\n}\n\n/** Unsubscribe from Meteor subscription */\nexport function unsubscribe (subscription: Subscription): void {\n  const index = subscriptions.indexOf(subscription)\n  if (index === -1) return\n  subscription.unsubscribe().then(() => {\n    subscriptions.splice(index, 1) // remove from collection\n    logger.info(`[${subscription.id}] Unsubscribed`)\n  }).catch((err: Error) => {\n    logger.error('[Unsubscribe] Error:', err)\n    throw err\n  })\n}\n\n/** Unsubscribe from all subscriptions in collection */\nexport function unsubscribeAll (): void {\n  subscriptions.map((s: Subscription) => unsubscribe(s))\n}\n\n/**\n * Begin subscription to room events for user.\n * Older adapters used an option for this method but it was always the default.\n */\nexport function subscribeToMessages (): Promise<Subscription> {\n  return subscribe(_messageCollectionName, _messageStreamName)\n}\n\n/**\n * Once a subscription is created, using `subscribeToMessages` this method\n * can be used to attach a callback to changes in the message stream.\n * This can be called directly for custom extensions, but for most usage (e.g.\n * for bots) the respondToMessages is more useful to only receive messages\n * matching configuration.\n *\n * If the bot hasn't been joined to any rooms at this point, it will attempt to\n * join now based on environment config, otherwise it might not receive any\n * messages. It doesn't matter that this happens asynchronously because the\n * bot's joined rooms can change after the reactive query is set up.\n *\n * @todo `reactToMessages` should call `subscribeToMessages` if not already\n *       done, so it's not required as an arbitrary step for simpler adapters.\n *       Also make `login` call `connect` for the same reason, the way\n *       `respondToMessages` calls `respondToMessages`, so all that's really\n *       required is:\n *       `driver.login(credentials).then(() => driver.respondToMessages(callback))`\n * @param callback Function called with every change in subscriptions.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n */\nexport function reactToMessages (callback: ICallback): void {\n  logger.info(`[reactive] Listening for change events in collection ${_messageCollectionName}`)\n  ddp.on(_messageCollectionName, (obj: any) => {\n    const changedMessage = obj.fields\n    if (changedMessage && changedMessage.args.length > 0) {\n      if (Array.isArray(changedMessage.args)) {\n        logger.info(`[received] Message in room ${ changedMessage.args[0].rid }`)\n        callback(null, changedMessage.args[0], changedMessage.args[1])\n      } else {\n        logger.debug('[received] Update without message args')\n      }\n    } else {\n      logger.debug('[received] Reactive query at ID ${ _id } without results')\n    }\n  })\n}\n\n/**\n * Proxy for `reactToMessages` with some filtering of messages based on config.\n *\n * @param callback Function called after filters run on subscription events.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n * @param options Sets filters for different event/message types.\n */\nexport function respondToMessages (callback: ICallback, options: IRespondOptions = {}): Promise<void | void[]> {\n  const config = Object.assign({}, settings, options)\n  let promise: Promise<void | void[]> = Promise.resolve() // return value, may be replaced by async ops\n\n  // Join configured rooms if they haven't been already, unless listening to all\n  // public rooms, in which case it doesn't matter\n  if (\n    !config.allPublic &&\n    joinedIds.length === 0 &&\n    config.rooms &&\n    config.rooms.length > 0\n  ) {\n    promise = joinRooms(config.rooms).catch((err) => {\n      logger.error(`Failed to join rooms set in env: ${config.rooms}`, err)\n    })\n  }\n\n  lastReadTime = new Date() // init before any message read\n  reactToMessages(async (err, message, meta) => {\n    if (err) {\n      logger.error(`Unable to receive messages ${JSON.stringify(err)}`)\n      callback(err) // bubble errors back to adapter\n    }\n\n    // Ignore bot's own messages\n    if (message.u._id === userId) return\n\n    // Ignore DMs unless configured not to\n    const isDM = meta.roomType === 'd'\n    if (isDM && !config.dm) return\n\n    // Ignore Livechat unless configured not to\n    const isLC = meta.roomType === 'l'\n    if (isLC && !config.livechat) return\n\n    // Ignore messages in un-joined public rooms unless configured not to\n    if (!config.allPublic && !isDM && !meta.roomParticipant) return\n\n    // Set current time for comparison to incoming\n    let currentReadTime = new Date(message.ts.$date)\n\n    // Ignore edited messages if configured to\n    if (!config.edited && typeof message.editedAt !== 'undefined') return\n\n    // Ignore messages in stream that aren't new\n    if (currentReadTime <= lastReadTime) return\n\n    // At this point, message has passed checks and can be responded to\n    logger.info(`Message receive callback ID ${message._id} at ${currentReadTime}`)\n    logger.info(`[Incoming] ${message.u.username}: ${(message.file !== undefined) ? message.attachments[0].title : message.msg}`)\n    lastReadTime = currentReadTime\n\n    /**\n     * @todo Fix below by adding to meta from Rocket.Chat instead of getting on\n     *       each message event. It's inefficient and throws off tests that\n     *       await on send completion, because the callback has not yet fired.\n     *       Then re-enable last two `.respondToMessages` tests.\n     */\n    // Add room name to meta, is useful for some adapters (is promise)\n    // if (!isDM && !isLC) meta.roomName = await getRoomName(message.rid)\n\n    // Processing completed, call callback to respond to message\n    callback(null, message, meta)\n  })\n  return promise\n}\n\n// PREPARE AND SEND MESSAGES\n// -----------------------------------------------------------------------------\n\n/** Get ID for a room by name (or ID). */\nexport function getRoomId (name: string): Promise<any> {\n  return cacheCall('getRoomIdByNameOrId', name)\n}\n\n/** Get name for a room by ID. */\nexport function getRoomName (id: string): Promise<string> {\n  return cacheCall('getRoomNameById', id)\n}\n\n/**\n * Get ID for a DM room by its recipient's name.\n * Will create a DM (with the bot) if it doesn't exist already.\n * @todo test why create resolves with object instead of simply ID\n */\nexport function getDirectMessageRoomId (username: string): Promise<string> {\n  return cacheCall('createDirectMessage', username).then((DM) => DM.rid)\n}\n\n/** Join the bot into a room by its name or ID */\nexport async function joinRoom (room: string): Promise<void> {\n  let roomId = await getRoomId(room)\n  let joinedIndex = joinedIds.indexOf(room)\n  if (joinedIndex !== -1) {\n    logger.error(`tried to join room that was already joined`)\n  } else {\n    await asyncCall('joinRoom', roomId)\n    joinedIds.push(roomId)\n  }\n}\n\n/** Exit a room the bot has joined */\nexport async function leaveRoom (room: string): Promise<void> {\n  let roomId = await getRoomId(room)\n  let joinedIndex = joinedIds.indexOf(room)\n  if (joinedIndex === -1) {\n    logger.error(`leave room ${room} failed because bot has not joined in room`)\n  } else {\n    await asyncCall('leaveRoom', roomId)\n    delete joinedIds[joinedIndex]\n  }\n}\n\n/** Join a set of rooms by array of names or IDs */\nexport function joinRooms (rooms: string[]): Promise<void[]> {\n  return Promise.all(rooms.map((room) => joinRoom(room)))\n}\n\n/**\n * Structure message content, optionally addressing to room ID.\n * Accepts message text string or a structured message object.\n */\nexport function prepareMessage (content: string | IMessage, roomId?: string): Message {\n  const message = new Message(content, integrationId)\n  if (roomId) message.setRoomId(roomId)\n  return message\n}\n\n/**\n * Send a prepared message object (with pre-defined room ID).\n * Usually prepared and called by sendMessageByRoomId or sendMessageByRoom.\n */\nexport function sendMessage (message: IMessage): Promise<IMessageReceiptAPI> {\n  return asyncCall('sendMessage', message)\n}\n\n/**\n * Prepare and send string/s to specified room ID.\n * @param content Accepts message text string or array of strings.\n * @param roomId  ID of the target room to use in send.\n * @todo Returning one or many gets complicated with type checking not allowing\n *       use of a property because result may be array, when you know it's not.\n *       Solution would probably be to always return an array, even for single\n *       send. This would be a breaking change, should hold until major version.\n */\nexport function sendToRoomId (content: string | string[], roomId: string): Promise<IMessageReceiptAPI[] | IMessageReceiptAPI> {\n  if (!Array.isArray(content)) {\n    return sendMessage(prepareMessage(content, roomId))\n  } else {\n    return Promise.all(content.map((text) => {\n      return sendMessage(prepareMessage(text, roomId))\n    }))\n  }\n}\n\n/**\n * Prepare and send string/s to specified room name (or ID).\n * @param content Accepts message text string or array of strings.\n * @param room    A name (or ID) to resolve as ID to use in send.\n */\nexport function sendToRoom (content: string | string[], room: string): Promise<IMessageReceiptAPI[] | IMessageReceiptAPI> {\n  return getRoomId(room).then((roomId) => sendToRoomId(content, roomId))\n}\n\n/**\n * Prepare and send string/s to a user in a DM.\n * @param content   Accepts message text string or array of strings.\n * @param username  Name to create (or get) DM for room ID to use in send.\n */\nexport function sendDirectToUser (content: string | string[], username: string): Promise<IMessageReceiptAPI[] | IMessageReceiptAPI> {\n  return getDirectMessageRoomId(username).then((rid) => sendToRoomId(content, rid))\n}\n\n/**\n * Edit an existing message, replacing any attributes with those provided.\n * The given message object should have the ID of an existing message.\n */\nexport function editMessage (message: IMessage): Promise<IMessage> {\n  return asyncCall('updateMessage', message)\n}\n\n/**\n * Send a reaction to an existing message. Simple proxy for method call.\n * @param emoji     Accepts string like `:thumbsup:` to add 👍 reaction\n * @param messageId ID for a previously sent message\n */\nexport function setReaction (emoji: string, messageId: string) {\n  return asyncCall('setReaction', emoji, messageId)\n}\n"]}